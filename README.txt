# Steam-Suggests: A movie recommendation program using Machine LearningThe application is purposed to suggest movie recommendations based off of a Steam user’s data. Steam is an online gaming store and portal that traffics millions of gamers. The player data was extracted via data scraping from steamcommunity.com. The two .csv files, from Kaggle.com, includes the data regarding the Games Library on Steam and a list of 200-thousand movies. The keywords utilized in the vocabulary were extracted from several domains including: the titles of the movies, titles of the games, descriptions of the games, and genres of the movies.## Getting Started1. Open Console/Terminal and run the line “pip install rake-nltk”. Rake is a tool to automatically extract keywords from CSV data. Then, run the line "pip install git+git://github.com/seatgeek/fuzzywuzzy.git@0.18.0#egg=fuzzywuzzy". Fuzzywuzzy is a tool for comparing keywords.2. Run SteamSuggestsGUI.py in Spyder 3.0.3. Type in your public – SteamID# (These can be found by logging into steam, clicking your profile, and taking the long string of numbers out of the URL.4. Click Retrieve Data. This will create a .csv in your file with you recently played games data in another .csv file in your shared folder.5. Click Display Data to create a graph of recommended movies with the percentage of accuracy generated by the user data.## Process

1. The GUI is opened prompting the user for SteamID# input
2. The data is scraped from steamcommunity.com and assembled into a .csv file SteamUserDATA.csv
3. The keyword classifier combines the data to generate the vocabulary.
4. The keyword classifier filters out all useless or complicated characters as well as sublists made by those characters.
5. The keyword classifier makes a new column in each dataframe named "Bag_of_words" this is all the useable data we got from step one.
6. Using FuzzyWuzzy, the keyword classifier compares the lists in both dataframes checking for similarities, it supplies a percentile score in a new column labeled "similarity"
7. Finally, the keyword classifier sorts the list by similarity so our highest percentile ranks are moved to the top, and filter out everything BUT the top 25 of that list.
8. A graph and a .csv displaying the data are created in the shared file that shows the users predicted movie recommendations.


### PrerequisitesSoftware required:```Anaconda-Navigator featuring Spyder 3.0 and the pandas / sklearn libraries.rake_nltk (pip install rake_nltk)fuzzywuzzy (pip install fuzzywuzzy)```## Built With* [Steam](http://www.steamcommunity.com) – Data scraped for User Input* [Anaconda-Navigator]( https://www.anaconda.com/products/individual) – Desktop Graphical User Interface for Python* [Python]( https://www.python.org/)  – OOP Language* [Kaggle]( https://www.kaggle.com/nikdavis/steam-store-games#steam_description_data.csv) – Steam Data
* [FuzzyWuzzy]( https://pypi.org/project/fuzzywuzzy/) - Keyword Comparator## Authors* **William Curtis** * **Michael Perry** 